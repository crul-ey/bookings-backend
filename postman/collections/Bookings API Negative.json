{
	"info": {
		"_postman_id": "788e6a60-5ae6-4bb9-8bcc-cb7c3612b678",
		"name": "Bookings API Negative",
		"description": "RESTful API for an online booking app using Express.js and Prisma",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39255545"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "{userId}",
					"item": [
						{
							"name": "Get user by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 404 - User niet gevonden\", function () {",
											"  pm.expect(pm.response.code).to.eql(404);",
											"});",
											"",
											"pm.test(\"Response bevat foutmelding\", function () {",
											"  const res = pm.response.json();",
											"  pm.expect(res).to.have.property(\"error\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/12345678-aaaa-bbbb-cccc-deadbeef0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"12345678-aaaa-bbbb-cccc-deadbeef0000"
									]
								}
							},
							"response": [
								{
									"name": "User not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "in",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update user by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 404 - User niet gevonden\", function () {",
											"  pm.expect(pm.response.code).to.eql(404);",
											"});",
											"",
											"pm.test(\"Response bevat foutmelding\", function () {",
											"  const res = pm.response.json();",
											"  pm.expect(res).to.have.property(\"error\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearerToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"jdoe_updated\",\n  \"name\": \"John Doe Updated\",\n  \"email\": \"updatedjohndoe@example.com\",\n  \"phoneNumber\": \"987-654-3210\",\n  \"profilePicture\": \"https://updated-example.com/images/johndoe.jpg\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/12345678-aaaa-bbbb-cccc-deadbeef0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"12345678-aaaa-bbbb-cccc-deadbeef0000"
									]
								}
							},
							"response": [
								{
									"name": "User not found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{bearerToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"jdoe_updated\",\n  \"name\": \"John Doe Updated\",\n  \"email\": \"updatedjohndoe@example.com\",\n  \"phoneNumber\": \"987-654-3210\",\n  \"profilePicture\": \"https://updated-example.com/images/johndoe.jpg\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "in",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete user by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Statuscode is 404\", function () {",
											"  pm.expect(pm.response.code).to.eql(404);",
											"});",
											"",
											"pm.test(\"Foutmelding bevat 'niet gevonden'\", function () {",
											"  const res = pm.response.json();",
											"  pm.expect(res.error).to.include(\"niet gevonden\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users12345678-aaaa-bbbb-cccc-deadbeef0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users12345678-aaaa-bbbb-cccc-deadbeef0000"
									]
								}
							},
							"response": [
								{
									"name": "User not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{bearerToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":userId"
											],
											"variable": [
												{
													"key": "userId",
													"value": "in",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Create a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 400 - Ongeldige input geweigerd\", function () {",
									"  pm.expect(pm.response.code).to.eql(400);",
									"});",
									"",
									"pm.test(\"Response bevat foutmelding\", function () {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"error\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"ab\",                    // te kort\r\n  \"password\": \"123\",                   // te kort\r\n  \"name\": \"\",                          // leeg\r\n  \"email\": \"invalid-email\",            // geen geldig e-mailadres\r\n  \"phoneNumber\": \"12\",                 // te kort\r\n  \"profilePicture\": \"\",\r\n  \"role\": \"admin\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearerToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"jdoe\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "hosts",
			"item": [
				{
					"name": "{hostId}",
					"item": [
						{
							"name": "Get host by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Statuscode is 404 voor niet-bestaande host\", function () {",
											"  pm.expect(pm.response.code).to.eql(404);",
											"});",
											"",
											"pm.test(\"Response bevat foutmelding\", function () {",
											"  const body = pm.response.json();",
											"  pm.expect(body).to.have.property(\"error\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hosts/12345678-aaaa-bbbb-cccc-deadbeef0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hosts",
										"12345678-aaaa-bbbb-cccc-deadbeef0000"
									]
								}
							},
							"response": [
								{
									"name": "Host not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/hosts/:hostId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"hosts",
												":hostId"
											],
											"variable": [
												{
													"key": "hostId",
													"value": "in",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update host by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 - Host niet gevonden\", function () {",
											"  pm.expect(pm.response.code).to.eql(404);",
											"});",
											"",
											"pm.test(\"Response bevat foutmelding\", function () {",
											"  const res = pm.response.json();",
											"  pm.expect(res).to.have.property(\"error\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearerToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"johnDoe_updated\",\n  \"name\": \"John Doe Updated\",\n  \"email\": \"updatedjohndoe@email.com\",\n  \"phoneNumber\": \"+11234567890\",\n  \"profilePicture\": \"https://updated-example.com/images/johndoe.jpg\",\n  \"aboutMe\": \"Updated bio for John Doe\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hosts/12345678-aaaa-bbbb-cccc-deadbeef0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hosts",
										"12345678-aaaa-bbbb-cccc-deadbeef0000"
									]
								}
							},
							"response": [
								{
									"name": "Host not found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{bearerToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"johnDoe_updated\",\n  \"name\": \"John Doe Updated\",\n  \"email\": \"updatedjohndoe@email.com\",\n  \"phoneNumber\": \"+11234567890\",\n  \"profilePicture\": \"https://updated-example.com/images/johndoe.jpg\",\n  \"aboutMe\": \"Updated bio for John Doe\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/hosts/:hostId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"hosts",
												":hostId"
											],
											"variable": [
												{
													"key": "hostId",
													"value": "in",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete host by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 - Host niet gevonden\", function () {",
											"  pm.expect(pm.response.code).to.eql(404);",
											"});",
											"",
											"pm.test(\"Response bevat foutmelding\", function () {",
											"  const res = pm.response.json();",
											"  pm.expect(res).to.have.property(\"error\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/hosts/{{hostId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hosts",
										"{{hostId}}"
									]
								}
							},
							"response": [
								{
									"name": "Host not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{bearerToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/hosts/:hostId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"hosts",
												":hostId"
											],
											"variable": [
												{
													"key": "hostId",
													"value": "in",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Create a new host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Statuscode is 400\", function () {",
									"  pm.expect(pm.response.code).to.eql(400);",
									"});",
									"",
									"pm.test(\"Foutmelding is aanwezig\", function () {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"error\");",
									"  pm.expect(res.error.length).to.be.greaterThan(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"\",\r\n  \"password\": \"123\",\r\n  \"name\": \"H\",\r\n  \"email\": \"not-an-email\",\r\n  \"phoneNumber\": \"12\",\r\n  \"profilePicture\": \"\",\r\n  \"aboutMe\": \"\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/hosts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hosts"
							]
						}
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearerToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"johnDoe\",\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hosts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hosts"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "properties",
			"item": [
				{
					"name": "{propertyId}",
					"item": [
						{
							"name": "Get property by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 Not Found - Property bestaat niet\", function () {",
											"  pm.expect(pm.response.code).to.eql(404);",
											"});",
											"",
											"pm.test(\"Response bevat foutmelding\", function () {",
											"  const res = pm.response.json();",
											"  pm.expect(res).to.have.property(\"error\");",
											"  pm.expect(res.error.toLowerCase()).to.include(\"niet gevonden\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/properties/12345678-aaaa-bbbb-cccc-deadbeef0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"properties",
										"12345678-aaaa-bbbb-cccc-deadbeef0000"
									]
								}
							},
							"response": [
								{
									"name": "Property not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/properties/:propertyId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"properties",
												":propertyId"
											],
											"variable": [
												{
													"key": "propertyId",
													"value": "in",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update property by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 Not Found - Property niet gevonden voor update\", () => {",
											"  pm.expect(pm.response.code).to.eql(404);",
											"});",
											"",
											"pm.test(\"Response bevat foutmelding\", () => {",
											"  const res = pm.response.json();",
											"  pm.expect(res).to.have.property(\"error\");",
											"  pm.expect(res.error.toLowerCase()).to.include(\"niet gevonden\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearerToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Updated Cozy Mountain Retreat\",\n  \"description\": \"Updated description for the cozy mountain retreat.\",\n  \"location\": \"Updated Location\",\n  \"pricePerNight\": 150.5,\n  \"bedroomCount\": 4,\n  \"bathRoomCount\": 3,\n  \"maxGuestCount\": 6,\n  \"rating\": 4.5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/properties/12345678-aaaa-bbbb-cccc-deadbeef0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"properties",
										"12345678-aaaa-bbbb-cccc-deadbeef0000"
									]
								}
							},
							"response": [
								{
									"name": "Property not found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{bearerToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"Updated Cozy Mountain Retreat\",\n  \"description\": \"Updated description for the cozy mountain retreat.\",\n  \"location\": \"Updated Location\",\n  \"pricePerNight\": 150.5,\n  \"bedroomCount\": 4,\n  \"bathRoomCount\": 3,\n  \"maxGuestCount\": 6,\n  \"rating\": 4.5\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/properties/:propertyId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"properties",
												":propertyId"
											],
											"variable": [
												{
													"key": "propertyId",
													"value": "in",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete property by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 Not Found - Property niet gevonden voor verwijdering\", () => {",
											"  pm.expect(pm.response.code).to.eql(404);",
											"});",
											"",
											"pm.test(\"Response bevat foutmelding\", () => {",
											"  const res = pm.response.json();",
											"  pm.expect(res).to.have.property(\"error\");",
											"  pm.expect(res.error.toLowerCase()).to.include(\"niet gevonden\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/properties/12345678-aaaa-bbbb-cccc-deadbeef0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"properties",
										"12345678-aaaa-bbbb-cccc-deadbeef0000"
									]
								}
							},
							"response": [
								{
									"name": "Property not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{bearerToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/properties/:propertyId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"properties",
												":propertyId"
											],
											"variable": [
												{
													"key": "propertyId",
													"value": "in",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Create a new property",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 - Ongeldige invoer geweigerd\", function () {",
									"  pm.expect(pm.response.code).to.eql(400);",
									"});",
									"",
									"pm.test(\"Response bevat foutmelding\", function () {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"error\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"description\": \"Foute property zonder title\",\r\n  \"location\": \"Nowhere\",\r\n  \"pricePerNight\": -100,\r\n  \"bedroomCount\": 2,\r\n  \"bathRoomCount\": 1,\r\n  \"maxGuestCount\": 3,\r\n  \"hostId\": \"not-a-uuid\",\r\n  \"rating\": 5\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/properties",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties"
							]
						}
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearerToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Cozy Mountain Retreat\",\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/properties",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"properties"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "amenities",
			"item": [
				{
					"name": "{amenityId}",
					"item": [
						{
							"name": "Get amenity by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 404 - Amenity niet gevonden\", function () {",
											"  pm.expect(pm.response.code).to.eql(404);",
											"});",
											"",
											"pm.test(\"Response bevat foutmelding\", function () {",
											"  const res = pm.response.json();",
											"  pm.expect(res).to.have.property(\"error\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/amenities/12345678-aaaa-bbbb-cccc-deadbeef0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"amenities",
										"12345678-aaaa-bbbb-cccc-deadbeef0000"
									]
								}
							},
							"response": [
								{
									"name": "Amenity not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/amenities/:amenityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"amenities",
												":amenityId"
											],
											"variable": [
												{
													"key": "amenityId",
													"value": "in",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update amenity by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 404 of 400 - Update ongeldig of niet gevonden\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
											"});",
											"",
											"pm.test(\"Response bevat foutmelding\", function () {",
											"  const res = pm.response.json();",
											"  pm.expect(res).to.have.property(\"error\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearerToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Updated Wifi\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/amenities/12345678-aaaa-bbbb-cccc-deadbeef0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"amenities",
										"12345678-aaaa-bbbb-cccc-deadbeef0000"
									]
								}
							},
							"response": [
								{
									"name": "Amenity not found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{bearerToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"Updated Wifi\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/amenities/:amenityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"amenities",
												":amenityId"
											],
											"variable": [
												{
													"key": "amenityId",
													"value": "in",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete amenity by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status 404 - Amenity niet gevonden voor verwijdering\", function () {",
											"  pm.expect(pm.response.code).to.eql(404);",
											"});",
											"",
											"pm.test(\"Response bevat foutmelding\", function () {",
											"  const res = pm.response.json();",
											"  pm.expect(res).to.have.property(\"error\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/amenities/12345678-aaaa-bbbb-cccc-deadbeef0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"amenities",
										"12345678-aaaa-bbbb-cccc-deadbeef0000"
									]
								}
							},
							"response": [
								{
									"name": "Amenity not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{bearerToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/amenities/:amenityId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"amenities",
												":amenityId"
											],
											"variable": [
												{
													"key": "amenityId",
													"value": "in",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Create a new amenity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status 400 - Ongeldige input geweigerd\", function () {",
									"  pm.expect(pm.response.code).to.eql(400);",
									"});",
									"",
									"pm.test(\"Response bevat foutmelding\", function () {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"error\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/amenities",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"amenities"
							]
						}
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearerToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/amenities",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"amenities"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "bookings",
			"item": [
				{
					"name": "{bookingId}",
					"item": [
						{
							"name": "Get booking by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 of 400 - Ongeldige update of booking niet gevonden\", () => {",
											"  pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/12345678-aaaa-bbbb-cccc-deadbeef0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										"12345678-aaaa-bbbb-cccc-deadbeef0000"
									]
								}
							},
							"response": [
								{
									"name": "Booking not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/bookings/:bookingId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bookings",
												":bookingId"
											],
											"variable": [
												{
													"key": "bookingId",
													"value": "f0123456-78ab-cdef-0123-456789abcdef",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update booking by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 of 400 - Ongeldige update of booking niet gevonden\", () => {",
											"  pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearerToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"checkinDate\": \"2023-03-11T18:00:00.000Z\",\n  \"checkoutDate\": \"2023-03-16T10:00:00.000Z\",\n  \"numberOfGuests\": 3,\n  \"totalPrice\": 200.75,\n  \"bookingStatus\": \"updated\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/bookings/12345678-aaaa-bbbb-cccc-deadbeef0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										"12345678-aaaa-bbbb-cccc-deadbeef0000"
									]
								}
							},
							"response": [
								{
									"name": "Booking not found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{bearerToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"checkinDate\": \"2023-03-11T18:00:00.000Z\",\n  \"checkoutDate\": \"2023-03-16T10:00:00.000Z\",\n  \"numberOfGuests\": 3,\n  \"totalPrice\": 200.75,\n  \"bookingStatus\": \"updated\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/bookings/:bookingId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bookings",
												":bookingId"
											],
											"variable": [
												{
													"key": "bookingId",
													"value": "f0123456-78ab-cdef-0123-456789abcdef",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete booking by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 - Booking niet gevonden voor verwijderen\", () => {",
											"  pm.expect(pm.response.code).to.eql(404);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bookings/12345678-aaaa-bbbb-cccc-deadbeef0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings",
										"12345678-aaaa-bbbb-cccc-deadbeef0000"
									]
								}
							},
							"response": [
								{
									"name": "Booking not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{bearerToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/bookings/:bookingId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"bookings",
												":bookingId"
											],
											"variable": [
												{
													"key": "bookingId",
													"value": "f0123456-78ab-cdef-0123-456789abcdef",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Create a new booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 - Booking aanmaken faalt bij ongeldige data\", () => {",
									"  pm.expect(pm.response.code).to.eql(400);",
									"});",
									"",
									"pm.test(\"Response bevat foutmelding\", () => {",
									"  const res = pm.response.json();",
									"  pm.expect(res).to.have.property(\"error\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"checkinDate\": \"\",\r\n  \"checkoutDate\": \"\",\r\n  \"numberOfGuests\": -2\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/bookings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bookings"
							]
						}
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearerToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/bookings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bookings"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "reviews",
			"item": [
				{
					"name": "{reviewId}",
					"item": [
						{
							"name": "Get review by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 Not Found - review niet gevonden\", function () {",
											"  pm.expect(pm.response.code).to.eql(404);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reviews/12345678-aaaa-bbbb-cccc-deadbeef0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										"12345678-aaaa-bbbb-cccc-deadbeef0000"
									]
								}
							},
							"response": [
								{
									"name": "Review not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/reviews/:reviewId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reviews",
												":reviewId"
											],
											"variable": [
												{
													"key": "reviewId",
													"value": "in",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update review by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 of 400 - review update mislukt\", function () {",
											"  pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearerToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"rating\": 4,\n  \"comment\": \"Updated review for the property.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews/12345678-aaaa-bbbb-cccc-deadbeef0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										"12345678-aaaa-bbbb-cccc-deadbeef0000"
									]
								}
							},
							"response": [
								{
									"name": "Review not found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{bearerToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"rating\": 4,\n  \"comment\": \"Updated review for the property.\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/reviews/:reviewId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reviews",
												":reviewId"
											],
											"variable": [
												{
													"key": "reviewId",
													"value": "in",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete review by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 Not Found - Review verwijderen met ongeldig ID\", function () {",
											"  pm.expect(pm.response.code).to.eql(404);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reviews/12345678-aaaa-bbbb-cccc-deadbeef0000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews",
										"12345678-aaaa-bbbb-cccc-deadbeef0000"
									]
								}
							},
							"response": [
								{
									"name": "Review not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{bearerToken}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reviews/:reviewId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reviews",
												":reviewId"
											],
											"variable": [
												{
													"key": "reviewId",
													"value": "in",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Create a new review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"400 Bad Request - review aanmaken zonder verplichte velden\", function () {",
									"  pm.expect(pm.response.code).to.eql(400);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{bearerToken}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rating\": 5\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reviews",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{bearerToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/reviews",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reviews"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			]
		},
		{
			"name": "User Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 401 Unauthorized\", function () {",
							"  pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Foutmelding is correct\", function () {",
							"  const res = pm.response.json();",
							"  pm.expect(res.error).to.include(\"niet gevonden\"); // of pas aan op exacte tekst van jouw API",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({\r",
							"    url: 'http://0.0.0.0:3000/login',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({\r",
							"            username: 'jdoe',\r",
							"            password: 'password123'\r",
							"        })\r",
							"    }\r",
							"}, function (err, response) {\r",
							"    if (err) {\r",
							"        console.error('Login request failed:', err);\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    var responseBody = JSON.parse(response.text());\r",
							"    pm.environment.set('bearerToken', responseBody.token);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"johndoe\",\n  \"password\": \"mys3cur3p@ss6655\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": [
				{
					"name": "Unauthorized",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.sendRequest({",
					"    url: 'http://0.0.0.0:3000/login',",
					"    method: 'POST',",
					"    header: {",
					"        'Content-Type': 'application/json'",
					"    },",
					"    body: {",
					"        mode: 'raw',",
					"        raw: JSON.stringify({",
					"            username: 'jdoe',",
					"            password: 'password123'",
					"        })",
					"    }",
					"}, function (err, response) {",
					"    if (err) {",
					"        console.error('Login request failed:', err);",
					"        return;",
					"    }",
					"    ",
					"    var responseBody = JSON.parse(response.text());",
					"    pm.environment.set('bearerToken', responseBody.token); // Assuming the token is in a 'token' property",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}