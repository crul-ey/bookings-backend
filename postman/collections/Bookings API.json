{
	"info": {
		"_postman_id": "6fbb7903-1b69-44f0-87af-d1c77624caf9",
		"name": "Bookings API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39255545"
	},
	"item": [
		{
			"name": "User Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Status moet 200 zijn",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"// Test 2: Token moet bestaan",
							"pm.test(\"Response has the required field 'token'\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.token).to.exist;",
							"});",
							"",
							"// Test 3: Token moet een niet-lege string zijn",
							"pm.test(\"Token is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");",
							"});",
							"",
							"// üîê BELANGRIJK: Zet token in environment voor volgende requests",
							"const responseData = pm.response.json();",
							"pm.environment.set(\"bearerToken\", responseData.token);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"jdoe\",\n  \"password\": \"password123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 Created - User succesvol aangemaakt\", function () {",
							"  pm.expect(pm.response.code).to.eql(201);",
							"});",
							"",
							"const user = pm.response.json();",
							"",
							"pm.test(\"User heeft geldig ID\", function () {",
							"  pm.expect(user).to.have.property(\"id\").and.to.be.a(\"string\").and.not.empty;",
							"});",
							"",
							"pm.test(\"User heeft juiste structuur\", function () {",
							"  pm.expect(user).to.have.property(\"username\");",
							"  pm.expect(user).to.have.property(\"name\");",
							"  pm.expect(user).to.have.property(\"email\");",
							"});",
							"",
							"// ‚úÖ Sla userId op",
							"pm.environment.set(\"userId\", user.id);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// üîÅ Genereer unieke timestamp-waarden\r",
							"const timestamp = Date.now();\r",
							"\r",
							"pm.environment.set(\"generatedUsername\", `user${timestamp}`);\r",
							"pm.environment.set(\"generatedEmail\", `user${timestamp}@example.com`);\r",
							"pm.environment.set(\"generatedName\", `User ${timestamp}`);\r",
							"pm.environment.set(\"generatedPhone\", `06123${Math.floor(10000 + Math.random() * 89999)}`);\r",
							"pm.environment.set(\"generatedProfilePic\", `https://example.com/profile-${timestamp}.jpg`);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"{{generatedUsername}}\",\n  \"password\": \"secure123\",\n  \"name\": \"{{generatedName}}\",\n  \"email\": \"{{generatedEmail}}\",\n  \"phoneNumber\": \"{{generatedPhone}}\",\n  \"profilePicture\": \"{{generatedProfilePic}}\",\n  \"role\": \"user\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new host",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 Created - Host succesvol aangemaakt\", function () {",
							"  pm.expect(pm.response.code).to.eql(201);",
							"});",
							"",
							"const host = pm.response.json();",
							"",
							"pm.test(\"Host bevat geldig ID\", function () {",
							"  pm.expect(host).to.have.property(\"id\").that.is.a(\"string\").and.not.empty;",
							"});",
							"",
							"pm.test(\"Host bevat verwachte velden\", function () {",
							"  pm.expect(host).to.have.property(\"username\").that.is.a(\"string\");",
							"  pm.expect(host).to.have.property(\"name\").that.is.a(\"string\");",
							"  pm.expect(host).to.have.property(\"email\").that.is.a(\"string\");",
							"  pm.expect(host).to.have.property(\"role\").that.equals(\"host\");",
							"});",
							"",
							"// ‚úÖ Sla ID op voor vervolg",
							"pm.environment.set(\"hostId\", host.id);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const timestamp = Date.now();\r",
							"\r",
							"pm.environment.set(\"hostUsername\", `host${timestamp}`);\r",
							"pm.environment.set(\"hostEmail\", `host${timestamp}@example.com`);\r",
							"pm.environment.set(\"hostName\", `Host ${timestamp}`);\r",
							"pm.environment.set(\"hostPhone\", `+31${Math.floor(100000000 + Math.random() * 899999999)}`);\r",
							"pm.environment.set(\"hostProfilePic\", `https://example.com/images/host-${timestamp}.jpg`);\r",
							"pm.environment.set(\"hostAboutMe\", \"I‚Äôm a friendly host who enjoys meeting travelers from around the world.\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"{{hostUsername}}\",\n  \"password\": \"hostpass123\",\n  \"name\": \"{{hostName}}\",\n  \"email\": \"{{hostEmail}}\",\n  \"phoneNumber\": \"{{hostPhone}}\",\n  \"profilePicture\": \"{{hostProfilePic}}\",\n  \"aboutMe\": \"{{hostAboutMe}}\",\n  \"role\": \"host\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/hosts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"hosts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new property",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 Created - Property succesvol aangemaakt\", function () {",
							"  pm.expect(pm.response.code).to.eql(201);",
							"});",
							"",
							"const property = pm.response.json();",
							"",
							"pm.test(\"Property bevat geldig ID\", function () {",
							"  pm.expect(property).to.have.property(\"id\").that.is.a(\"string\").and.not.empty;",
							"});",
							"",
							"pm.test(\"Property heeft verwachte velden\", function () {",
							"  pm.expect(property).to.have.property(\"title\").that.is.a(\"string\");",
							"  pm.expect(property).to.have.property(\"location\").that.is.a(\"string\");",
							"  pm.expect(property).to.have.property(\"pricePerNight\").that.is.a(\"number\");",
							"  pm.expect(property).to.have.property(\"hostId\").that.is.a(\"string\");",
							"  pm.expect(property).to.have.property(\"rating\").that.is.a(\"number\");",
							"});",
							"",
							"pm.test(\"Rating komt overeen met verwachte waarde\", function () {",
							"  const expectedRating = parseInt(pm.environment.get(\"propertyRating\") || \"5\", 10);",
							"  pm.expect(property.rating).to.eql(expectedRating);",
							"});",
							"",
							"// ‚úÖ Sla op voor volgende requests",
							"pm.environment.set(\"propertyId\", property.id);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const timestamp = Date.now();\r",
							"\r",
							"pm.environment.set(\"propertyTitle\", `Cozy Retreat ${timestamp}`);\r",
							"pm.environment.set(\"propertyLocation\", `Rocky Mountains`);\r",
							"pm.environment.set(\"propertyDescription\", `A peaceful escape in nature created at ${timestamp}`);\r",
							"pm.environment.set(\"propertyPrice\", \"120.50\");\r",
							"pm.environment.set(\"propertyRating\", \"5\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"hostId\": \"{{hostId}}\",\n  \"title\": \"{{propertyTitle}}\",\n  \"description\": \"{{propertyDescription}}\",\n  \"location\": \"{{propertyLocation}}\",\n  \"pricePerNight\": {{propertyPrice}},\n  \"bedroomCount\": 3,\n  \"bathRoomCount\": 2,\n  \"maxGuestCount\": 5,\n  \"rating\": {{propertyRating}}\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/properties",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"properties"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new amenity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 Created - Amenity succesvol aangemaakt\", function () {",
							"  pm.expect(pm.response.code).to.eql(201);",
							"});",
							"",
							"const amenity = pm.response.json();",
							"",
							"pm.test(\"Amenity bevat geldig ID\", function () {",
							"  pm.expect(amenity).to.have.property(\"id\").that.is.a(\"string\").and.not.empty;",
							"});",
							"",
							"pm.test(\"Amenity heeft geldige naam\", function () {",
							"  pm.expect(amenity).to.have.property(\"name\").that.is.a(\"string\").and.not.empty;",
							"});",
							"",
							"// ‚úÖ Sla amenityId op voor latere requests",
							"pm.environment.set(\"amenityId\", amenity.id);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const timestamp = Date.now();\r",
							"pm.environment.set(\"amenityName\", `WIFI-${timestamp}`);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{amenityName}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/amenities",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"amenities"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 Created - Booking succesvol aangemaakt\", function () {",
							"  pm.expect(pm.response.code).to.eql(201);",
							"});",
							"",
							"const booking = pm.response.json();",
							"",
							"pm.test(\"Booking bevat geldig ID\", function () {",
							"  pm.expect(booking).to.have.property(\"id\").that.is.a(\"string\").and.not.empty;",
							"});",
							"",
							"pm.test(\"Booking bevat juiste status\", function () {",
							"  pm.expect(booking).to.have.property(\"bookingStatus\").that.equals(pm.environment.get(\"bookingStatus\"));",
							"});",
							"",
							"pm.test(\"Booking heeft geldige user- en propertykoppeling\", function () {",
							"  pm.expect(booking).to.have.property(\"userId\").that.equals(pm.environment.get(\"userId\"));",
							"  pm.expect(booking).to.have.property(\"propertyId\").that.equals(pm.environment.get(\"propertyId\"));",
							"});",
							"",
							"// ‚úÖ Sla ID op voor vervolgrequests",
							"pm.environment.set(\"bookingId\", booking.id);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const now = new Date();\r",
							"const checkin = new Date(now.getTime() + 2 * 24 * 60 * 60 * 1000);  // +2 dagen\r",
							"const checkout = new Date(now.getTime() + 5 * 24 * 60 * 60 * 1000); // +5 dagen\r",
							"\r",
							"pm.environment.set(\"bookingCheckinDate\", checkin.toISOString());\r",
							"pm.environment.set(\"bookingCheckoutDate\", checkout.toISOString());\r",
							"pm.environment.set(\"bookingTotalPrice\", \"150.25\");\r",
							"pm.environment.set(\"bookingGuests\", \"2\");\r",
							"pm.environment.set(\"bookingStatus\", \"confirmed\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"propertyId\": \"{{propertyId}}\",\n  \"checkinDate\": \"{{bookingCheckinDate}}\",\n  \"checkoutDate\": \"{{bookingCheckoutDate}}\",\n  \"numberOfGuests\": {{bookingGuests}},\n  \"totalPrice\": {{bookingTotalPrice}},\n  \"bookingStatus\": \"{{bookingStatus}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/bookings",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a new review",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"201 Created - Review succesvol aangemaakt\", function () {",
							"  pm.expect(pm.response.code).to.eql(201);",
							"});",
							"",
							"const review = pm.response.json();",
							"",
							"pm.test(\"Review bevat geldig ID\", function () {",
							"  pm.expect(review).to.have.property(\"id\").that.is.a(\"string\").and.not.empty;",
							"});",
							"",
							"pm.test(\"Review heeft juiste structuur\", function () {",
							"  pm.expect(review).to.have.property(\"userId\").that.equals(pm.environment.get(\"userId\"));",
							"  pm.expect(review).to.have.property(\"propertyId\").that.equals(pm.environment.get(\"propertyId\"));",
							"  pm.expect(review).to.have.property(\"rating\").that.is.a(\"number\");",
							"  pm.expect(review).to.have.property(\"comment\").that.is.a(\"string\");",
							"});",
							"",
							"// ‚úÖ Sla ID op voor vervolg",
							"pm.environment.set(\"reviewId\", review.id);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"propertyId\": \"{{propertyId}}\",\n  \"rating\": 4,\n  \"comment\": \"Fantastisch verblijf, zeer schoon en vriendelijk ontvangen!\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/reviews",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get user by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ‚úÖ Controleer statuscode",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"// ‚úÖ Controleer of de ID overeenkomt met opgeslagen userId",
							"const data = pm.response.json();",
							"",
							"pm.test(\"User ID should match environment userId\", function () {",
							"  pm.expect(data.id).to.eql(pm.environment.get(\"userId\"));",
							"});",
							"",
							"// ‚úÖ Extra checks op structuur",
							"pm.test(\"User object has expected fields\", function () {",
							"  pm.expect(data).to.have.property(\"username\");",
							"  pm.expect(data).to.have.property(\"name\");",
							"  pm.expect(data).to.have.property(\"email\");",
							"  pm.expect(data).to.have.property(\"phoneNumber\");",
							"  pm.expect(data).to.have.property(\"profilePicture\");",
							"  pm.expect(data).to.have.property(\"role\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update user by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const updated = pm.response.json();",
							"",
							"pm.test(\"Statuscode is 200\", function () {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Gebruiker is correct ge√ºpdatet\", function () {",
							"  pm.expect(updated.username).to.eql(pm.environment.get(\"updateUsername\"));",
							"  pm.expect(updated.name).to.eql(pm.environment.get(\"updateName\"));",
							"  pm.expect(updated.email).to.eql(pm.environment.get(\"updateEmail\"));",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// üîÅ Genereer nieuwe unieke gegevens voor update\r",
							"const timestamp = Date.now();\r",
							"pm.environment.set(\"updateUsername\", `updatedUser${timestamp}`);\r",
							"pm.environment.set(\"updateEmail\", `updated${timestamp}@example.com`);\r",
							"pm.environment.set(\"updateName\", `Updated User ${timestamp}`);\r",
							"pm.environment.set(\"updatePhone\", `06123${Math.floor(10000 + Math.random() * 89999)}`);\r",
							"pm.environment.set(\"updateProfilePic\", `https://example.com/profile-updated-${timestamp}.jpg`);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"{{updateUsername}}\",\n  \"password\": \"updatedpass456\",\n  \"name\": \"{{updateName}}\",\n  \"email\": \"{{updateEmail}}\",\n  \"phoneNumber\": \"{{updatePhone}}\",\n  \"profilePicture\": \"{{updateProfilePic}}\",\n  \"role\": \"user\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get host by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ‚úÖ Statuscode check",
							"pm.test(\"Statuscode is 200\", function () {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"const host = pm.response.json();",
							"",
							"// ‚úÖ Controleer of de juiste host is opgehaald",
							"pm.test(\"Ophaalde host ID komt overeen met hostId uit environment\", function () {",
							"  pm.expect(host.id).to.eql(pm.environment.get(\"hostId\"));",
							"});",
							"",
							"// ‚úÖ Controleer aanwezigheid van alle verwachte velden",
							"pm.test(\"Host bevat alle verwachte eigenschappen\", function () {",
							"  pm.expect(host).to.have.property(\"username\");",
							"  pm.expect(host).to.have.property(\"name\");",
							"  pm.expect(host).to.have.property(\"email\");",
							"  pm.expect(host).to.have.property(\"phoneNumber\");",
							"  pm.expect(host).to.have.property(\"profilePicture\");",
							"  pm.expect(host).to.have.property(\"aboutMe\");",
							"  pm.expect(host).to.have.property(\"role\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/hosts/{{hostId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"hosts",
						"{{hostId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update host by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 200 - Host succesvol bijgewerkt\", function () {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"const res = pm.response.json();",
							"",
							"pm.test(\"Ge√ºpdatete velden kloppen\", function () {",
							"  pm.expect(res.username).to.eql(pm.environment.get(\"updateHostUsername\"));",
							"  pm.expect(res.name).to.eql(pm.environment.get(\"updateHostName\"));",
							"  pm.expect(res.email).to.eql(pm.environment.get(\"updateHostEmail\"));",
							"  pm.expect(res.phoneNumber).to.eql(pm.environment.get(\"updateHostPhone\"));",
							"  pm.expect(res.aboutMe).to.eql(pm.environment.get(\"updateHostAboutMe\"));",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const timestamp = Date.now();\r",
							"\r",
							"pm.environment.set(\"updateHostUsername\", `updatedHost${timestamp}`);\r",
							"pm.environment.set(\"updateHostEmail\", `updated-host${timestamp}@example.com`);\r",
							"pm.environment.set(\"updateHostName\", `Updated Host ${timestamp}`);\r",
							"pm.environment.set(\"updateHostPhone\", `+31${Math.floor(100000000 + Math.random() * 899999999)}`);\r",
							"pm.environment.set(\"updateHostProfilePic\", `https://example.com/images/host-updated-${timestamp}.jpg`);\r",
							"pm.environment.set(\"updateHostAboutMe\", \"Updated bio: I‚Äôve hosted hundreds of guests from around the world.\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"{{updateHostUsername}}\",\n  \"password\": \"updatedhost456\",\n  \"name\": \"{{updateHostName}}\",\n  \"email\": \"{{updateHostEmail}}\",\n  \"phoneNumber\": \"{{updateHostPhone}}\",\n  \"profilePicture\": \"{{updateHostProfilePic}}\",\n  \"aboutMe\": \"{{updateHostAboutMe}}\",\n  \"role\": \"host\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/hosts/{{hostId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"hosts",
						"{{hostId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get property by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Statuscode is 200\", function () {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"const property = pm.response.json();",
							"",
							"// ‚úÖ Controleer of de juiste property is opgehaald",
							"pm.test(\"Property ID komt overeen met opgeslagen propertyId\", function () {",
							"  pm.expect(property.id).to.eql(pm.environment.get(\"propertyId\"));",
							"});",
							"",
							"// ‚úÖ Controleer of alle belangrijke velden aanwezig zijn",
							"pm.test(\"Property bevat verwachte velden\", function () {",
							"  pm.expect(property).to.have.property(\"title\");",
							"  pm.expect(property).to.have.property(\"description\");",
							"  pm.expect(property).to.have.property(\"location\");",
							"  pm.expect(property).to.have.property(\"pricePerNight\");",
							"  pm.expect(property).to.have.property(\"bedroomCount\");",
							"  pm.expect(property).to.have.property(\"bathRoomCount\");",
							"  pm.expect(property).to.have.property(\"maxGuestCount\");",
							"  pm.expect(property).to.have.property(\"rating\");",
							"  pm.expect(property).to.have.property(\"host\");",
							"  pm.expect(property).to.have.property(\"amenities\");",
							"  pm.expect(property).to.have.property(\"bookings\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/properties/{{propertyId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"properties",
						"{{propertyId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update property by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const updated = pm.response.json();",
							"",
							"pm.test(\"Statuscode is 200 - Property succesvol bijgewerkt\", function () {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Ge√ºpdatete velden zijn correct\", function () {",
							"  pm.expect(updated.title).to.eql(pm.environment.get(\"updatePropertyTitle\"));",
							"  pm.expect(updated.description).to.eql(pm.environment.get(\"updatePropertyDescription\"));",
							"  pm.expect(updated.location).to.eql(pm.environment.get(\"updatePropertyLocation\"));",
							"  pm.expect(updated.pricePerNight).to.eql(parseFloat(pm.environment.get(\"updatePropertyPrice\")));",
							"  pm.expect(updated.rating).to.eql(parseInt(pm.environment.get(\"updatePropertyRating\")));",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const timestamp = Date.now();\r",
							"\r",
							"pm.environment.set(\"updatePropertyTitle\", `Updated Loft ${timestamp}`);\r",
							"pm.environment.set(\"updatePropertyLocation\", `Updated Location ${timestamp}`);\r",
							"pm.environment.set(\"updatePropertyDescription\", `Updated description on ${timestamp}`);\r",
							"pm.environment.set(\"updatePropertyPrice\", \"145.75\");\r",
							"pm.environment.set(\"updatePropertyRating\", \"4\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"hostId\": \"{{hostId}}\",\n  \"title\": \"{{updatePropertyTitle}}\",\n  \"description\": \"{{updatePropertyDescription}}\",\n  \"location\": \"{{updatePropertyLocation}}\",\n  \"pricePerNight\": {{updatePropertyPrice}},\n  \"bedroomCount\": 4,\n  \"bathRoomCount\": 2,\n  \"maxGuestCount\": 6,\n  \"rating\": {{updatePropertyRating}}\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/properties/{{propertyId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"properties",
						"{{propertyId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get amenity by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 200 - Amenity succesvol opgehaald\", () => {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"const amenity = pm.response.json();",
							"",
							"pm.test(\"Amenity heeft correcte structuur\", () => {",
							"  pm.expect(amenity).to.have.property(\"id\").that.is.a(\"string\").and.not.empty;",
							"  pm.expect(amenity).to.have.property(\"name\").that.is.a(\"string\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/amenities/{{amenityId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"amenities",
						"{{amenityId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update amenity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK - Amenity succesvol bijgewerkt\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const updatedAmenity = pm.response.json();\r",
							"\r",
							"pm.test(\"Naam is correct aangepast\", () => {\r",
							"  pm.expect(updatedAmenity.name).to.eql(pm.environment.get(\"updatedAmenityName\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const timestamp = Date.now();\r",
							"pm.environment.set(\"updatedAmenityName\", `Updated Amenity ${timestamp}`);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer <token>"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"{{updatedAmenityName}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/amenities/{{amenityId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"amenities",
						"{{amenityId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get booking by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK - Booking succesvol opgehaald\", function () {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"const booking = pm.response.json();",
							"",
							"pm.test(\"Booking bevat geldig ID\", function () {",
							"  pm.expect(booking).to.have.property(\"id\").that.equals(pm.environment.get(\"bookingId\"));",
							"});",
							"",
							"pm.test(\"Booking heeft juiste structuur\", function () {",
							"  pm.expect(booking).to.have.property(\"userId\").that.is.a(\"string\");",
							"  pm.expect(booking).to.have.property(\"propertyId\").that.is.a(\"string\");",
							"  pm.expect(booking).to.have.property(\"checkinDate\").that.is.a(\"string\");",
							"  pm.expect(booking).to.have.property(\"checkoutDate\").that.is.a(\"string\");",
							"  pm.expect(booking).to.have.property(\"numberOfGuests\").that.is.a(\"number\");",
							"  pm.expect(booking).to.have.property(\"totalPrice\").that.is.a(\"number\");",
							"  pm.expect(booking).to.have.property(\"bookingStatus\").that.is.a(\"string\");",
							"});",
							"",
							"pm.test(\"Booking bevat embedded user en property info\", function () {",
							"  pm.expect(booking).to.have.property(\"user\").that.is.an(\"object\");",
							"  pm.expect(booking.user).to.have.property(\"name\");",
							"  pm.expect(booking).to.have.property(\"property\").that.is.an(\"object\");",
							"  pm.expect(booking.property).to.have.property(\"title\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/bookings/{{bookingId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"bookings",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update booking by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK - Booking succesvol ge√ºpdatet\", function () {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"const booking = pm.response.json();",
							"",
							"pm.test(\"Ge√ºpdatete booking bevat juiste ID en status\", function () {",
							"  pm.expect(booking).to.have.property(\"id\").that.equals(pm.environment.get(\"bookingId\"));",
							"  pm.expect(booking).to.have.property(\"bookingStatus\").that.equals(pm.environment.get(\"updatedBookingStatus\"));",
							"});",
							"",
							"pm.test(\"Ge√ºpdatete velden zijn correct\", function () {",
							"  pm.expect(booking.numberOfGuests).to.eql(parseInt(pm.environment.get(\"updatedBookingGuests\")));",
							"  pm.expect(booking.totalPrice).to.eql(parseFloat(pm.environment.get(\"updatedBookingPrice\")));",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const checkin = new Date(Date.now() + 3 * 24 * 60 * 60 * 1000);  // over 3 dagen\r",
							"const checkout = new Date(Date.now() + 6 * 24 * 60 * 60 * 1000); // over 6 dagen\r",
							"\r",
							"pm.environment.set(\"updatedBookingCheckin\", checkin.toISOString());\r",
							"pm.environment.set(\"updatedBookingCheckout\", checkout.toISOString());\r",
							"pm.environment.set(\"updatedBookingGuests\", \"3\");\r",
							"pm.environment.set(\"updatedBookingPrice\", \"180.75\");\r",
							"pm.environment.set(\"updatedBookingStatus\", \"updated\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"propertyId\": \"{{propertyId}}\",\n  \"checkinDate\": \"{{updatedBookingCheckin}}\",\n  \"checkoutDate\": \"{{updatedBookingCheckout}}\",\n  \"numberOfGuests\": {{updatedBookingGuests}},\n  \"totalPrice\": {{updatedBookingPrice}},\n  \"bookingStatus\": \"{{updatedBookingStatus}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/bookings/{{bookingId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"bookings",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get review by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK - Review succesvol opgehaald\", function () {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"const review = pm.response.json();",
							"",
							"pm.test(\"Review heeft juiste ID\", function () {",
							"  pm.expect(review).to.have.property(\"id\").that.equals(pm.environment.get(\"reviewId\"));",
							"});",
							"",
							"pm.test(\"Review bevat alle vereiste velden\", function () {",
							"  pm.expect(review).to.have.property(\"userId\").that.equals(pm.environment.get(\"userId\"));",
							"  pm.expect(review).to.have.property(\"propertyId\").that.equals(pm.environment.get(\"propertyId\"));",
							"  pm.expect(review).to.have.property(\"rating\").that.is.a(\"number\");",
							"  pm.expect(review).to.have.property(\"comment\").that.is.a(\"string\");",
							"});",
							"",
							"pm.test(\"Review bevat embedded user & property info\", function () {",
							"  pm.expect(review).to.have.property(\"user\").that.is.an(\"object\");",
							"  pm.expect(review.user).to.have.property(\"name\");",
							"",
							"  pm.expect(review).to.have.property(\"property\").that.is.an(\"object\");",
							"  pm.expect(review.property).to.have.property(\"title\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/reviews/{{reviewId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews",
						"{{reviewId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update review by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK - Review succesvol ge√ºpdatet\", function () {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"const review = pm.response.json();",
							"",
							"pm.test(\"Review ID blijft correct\", function () {",
							"  pm.expect(review).to.have.property(\"id\").that.equals(pm.environment.get(\"reviewId\"));",
							"});",
							"",
							"pm.test(\"Rating en comment zijn ge√ºpdatet\", function () {",
							"  pm.expect(review.rating).to.eql(parseInt(pm.environment.get(\"updatedReviewRating\")));",
							"  pm.expect(review.comment).to.eql(pm.environment.get(\"updatedReviewComment\"));",
							"});",
							"",
							"pm.test(\"Relaties zijn correct\", function () {",
							"  pm.expect(review.userId).to.eql(pm.environment.get(\"userId\"));",
							"  pm.expect(review.propertyId).to.eql(pm.environment.get(\"propertyId\"));",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"updatedReviewRating\", \"5\");\r",
							"pm.environment.set(\"updatedReviewComment\", \"Zeer aangename ervaring, zou opnieuw boeken!\");\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userId\": \"{{userId}}\",\n  \"propertyId\": \"{{propertyId}}\",\n  \"rating\": {{updatedReviewRating}},\n  \"comment\": \"{{updatedReviewComment}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/reviews/{{reviewId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews",
						"{{reviewId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK - Alle users succesvol opgehaald\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const users = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is een array\", () => {\r",
							"  pm.expect(users).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"User bevat vereiste velden\", () => {\r",
							"  if (users.length > 0) {\r",
							"    const u = users[0];\r",
							"    pm.expect(u).to.have.property(\"id\");\r",
							"    pm.expect(u).to.have.property(\"username\");\r",
							"    pm.expect(u).to.have.property(\"email\");\r",
							"    pm.expect(u).to.have.property(\"name\");\r",
							"    pm.expect(u).to.have.property(\"role\");\r",
							"  }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all hosts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK - Alle hosts succesvol opgehaald\", function () {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"const hosts = pm.response.json();",
							"",
							"pm.test(\"Response is een array\", function () {",
							"  pm.expect(hosts).to.be.an(\"array\");",
							"});",
							"",
							"if (hosts.length > 0) {",
							"  const first = hosts[0];",
							"",
							"  pm.test(\"Host bevat verplichte velden\", function () {",
							"    pm.expect(first).to.have.property(\"id\").that.is.a(\"string\");",
							"    pm.expect(first).to.have.property(\"username\").that.is.a(\"string\");",
							"    pm.expect(first).to.have.property(\"name\").that.is.a(\"string\");",
							"    pm.expect(first).to.have.property(\"email\").that.is.a(\"string\");",
							"    pm.expect(first).to.have.property(\"role\").that.equals(\"host\");",
							"  });",
							"",
							"  // Optioneel: sla hostId op voor vervolgrequests",
							"  pm.environment.set(\"hostId\", first.id);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/hosts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"hosts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all properties",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK - Alle properties succesvol opgehaald\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const properties = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is een array\", () => {\r",
							"  pm.expect(properties).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Property bevat vereiste velden\", () => {\r",
							"  if (properties.length > 0) {\r",
							"    const p = properties[0];\r",
							"    pm.expect(p).to.have.property(\"id\");\r",
							"    pm.expect(p).to.have.property(\"title\");\r",
							"    pm.expect(p).to.have.property(\"location\");\r",
							"    pm.expect(p).to.have.property(\"pricePerNight\");\r",
							"  }\r",
							"});\r",
							"\r",
							"pm.test(\"Property bevat embedded host info\", () => {\r",
							"  if (properties.length > 0) {\r",
							"    const p = properties[0];\r",
							"    pm.expect(p).to.have.property(\"host\");\r",
							"    pm.expect(p.host).to.have.property(\"name\");\r",
							"    pm.expect(p.host).to.have.property(\"email\");\r",
							"  }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/properties",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"properties"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all amenities",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK - Alle amenities succesvol opgehaald\", function () {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"const amenities = pm.response.json();",
							"",
							"pm.test(\"Response is een array\", function () {",
							"  pm.expect(amenities).to.be.an(\"array\");",
							"});",
							"",
							"if (amenities.length > 0) {",
							"  const first = amenities[0];",
							"",
							"  pm.test(\"Amenity bevat verplichte velden\", function () {",
							"    pm.expect(first).to.have.property(\"id\").that.is.a(\"string\");",
							"    pm.expect(first).to.have.property(\"name\").that.is.a(\"string\");",
							"  });",
							"",
							"  // Optioneel: sla de eerste amenityId op voor tests",
							"  pm.environment.set(\"amenityId\", first.id);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/amenities",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"amenities"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all bookings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"pm.test(\"200 OK - Alle bookings succesvol opgehaald\", function () {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"const bookings = pm.response.json();",
							"",
							"pm.test(\"Bookings is een array\", function () {",
							"  pm.expect(bookings).to.be.an(\"array\");",
							"});",
							"",
							"if (bookings.length > 0) {",
							"  const first = bookings[0];",
							"",
							"  pm.test(\"Booking bevat basisvelden\", function () {",
							"    pm.expect(first).to.have.property(\"id\").that.is.a(\"string\");",
							"    pm.expect(first).to.have.property(\"userId\").that.is.a(\"string\");",
							"    pm.expect(first).to.have.property(\"propertyId\").that.is.a(\"string\");",
							"    pm.expect(first).to.have.property(\"checkinDate\").that.is.a(\"string\");",
							"    pm.expect(first).to.have.property(\"checkoutDate\").that.is.a(\"string\");",
							"    pm.expect(first).to.have.property(\"numberOfGuests\").that.is.a(\"number\");",
							"    pm.expect(first).to.have.property(\"totalPrice\").that.is.a(\"number\");",
							"    pm.expect(first).to.have.property(\"bookingStatus\").that.is.a(\"string\");",
							"  });",
							"",
							"  pm.test(\"Booking bevat embedded user & property\", function () {",
							"    pm.expect(first).to.have.property(\"user\").that.is.an(\"object\");",
							"    pm.expect(first.user).to.have.property(\"name\");",
							"    pm.expect(first).to.have.property(\"property\").that.is.an(\"object\");",
							"    pm.expect(first.property).to.have.property(\"title\");",
							"  });",
							"",
							"  // Optioneel: sla ID van eerste booking op",
							"  pm.environment.set(\"bookingId\", first.id);",
							"}",
							"",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Id should be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function (booking) {",
							"        pm.expect(booking.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"userId is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function (booking) {",
							"        pm.expect(booking.userId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/bookings",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all reviews",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK - Alle reviews succesvol opgehaald\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const reviews = pm.response.json();\r",
							"\r",
							"pm.test(\"Response is een array\", () => {\r",
							"  pm.expect(reviews).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Review bevat verplichte velden\", () => {\r",
							"  if (reviews.length > 0) {\r",
							"    const r = reviews[0];\r",
							"    pm.expect(r).to.have.property(\"id\");\r",
							"    pm.expect(r).to.have.property(\"userId\");\r",
							"    pm.expect(r).to.have.property(\"propertyId\");\r",
							"    pm.expect(r).to.have.property(\"rating\");\r",
							"    pm.expect(r).to.have.property(\"comment\");\r",
							"  }\r",
							"});\r",
							"\r",
							"pm.test(\"Review bevat embedded user & property\", () => {\r",
							"  if (reviews.length > 0) {\r",
							"    const r = reviews[0];\r",
							"    pm.expect(r).to.have.property(\"user\");\r",
							"    pm.expect(r).to.have.property(\"property\");\r",
							"  }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/reviews",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete review by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ‚úÖ Controleer of reviewId bestaat in de environment",
							"const reviewId = pm.environment.get(\"reviewId\");",
							"",
							"if (!reviewId) {",
							"  console.warn(\"‚ö†Ô∏è Geen reviewId beschikbaar ‚Äì overslaan.\");",
							"  postman.setNextRequest(null); // Sla deze stap over in runner",
							"} else {",
							"  // ‚úÖ Toegestane statuscodes (200 = OK, 204 = No Content, 404 = al weg)",
							"  pm.test(\"‚úÖ Review succesvol verwijderd of bestond al niet\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 404]);",
							"  });",
							"",
							"  // ‚úÖ Review ID uit environment verwijderen (voor latere validatie)",
							"  pm.test(\"üßπ Review ID verwijderd uit environment\", function () {",
							"    pm.environment.unset(\"reviewId\");",
							"  });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/reviews/{{reviewId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reviews",
						"{{reviewId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete amenity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ‚úÖ Haal het opgeslagen amenityId op\r",
							"const amenityId = pm.environment.get(\"amenityId\");\r",
							"\r",
							"if (!amenityId) {\r",
							"  console.warn(\"‚ö†Ô∏è Geen amenityId gevonden ‚Äì skip test.\");\r",
							"  postman.setNextRequest(null); // Sla deze stap over als er geen ID is\r",
							"} else {\r",
							"  // ‚úÖ Controleer of status 200, 204 of 404 is\r",
							"  pm.test(\"‚úÖ Amenity succesvol verwijderd of bestond niet meer\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 404]);\r",
							"  });\r",
							"\r",
							"  // ‚úÖ Verwijder het ID uit de omgeving\r",
							"  pm.test(\"üßπ amenityId verwijderd uit environment\", () => {\r",
							"    pm.environment.unset(\"amenityId\");\r",
							"  });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer <token>"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/amenities/{{amenityId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"amenities",
						"{{amenityId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete booking by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ‚úÖ Haal het opgeslagen bookingId op",
							"const bookingId = pm.environment.get(\"bookingId\");",
							"",
							"if (!bookingId) {",
							"  console.warn(\"‚ö†Ô∏è Geen bookingId gevonden ‚Äì skip test.\");",
							"  postman.setNextRequest(null); // Stop testflow als er geen ID is",
							"} else {",
							"  // ‚úÖ Accepteer 200, 204 of 404 als geldige resultaten",
							"  pm.test(\"‚úÖ Booking succesvol verwijderd of al niet meer aanwezig\", () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 404]);",
							"  });",
							"",
							"  // ‚úÖ Verwijder bookingId uit environment om fouten later te voorkomen",
							"  pm.test(\"üßπ bookingId verwijderd uit environment\", () => {",
							"    pm.environment.unset(\"bookingId\");",
							"  });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/bookings/{{bookingId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"bookings",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete property by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ‚úÖ Haal het opgeslagen propertyId op",
							"const propertyId = pm.environment.get(\"propertyId\");",
							"",
							"if (!propertyId) {",
							"  console.warn(\"‚ö†Ô∏è Geen propertyId aanwezig ‚Äì sla test over.\");",
							"  postman.setNextRequest(null); // Stop testflow hier als er geen ID is",
							"} else {",
							"  // ‚úÖ Sta 200, 204 of 404 toe (bijv. als de property al weg was)",
							"  pm.test(\"‚úÖ Property succesvol verwijderd of al niet aanwezig\", () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 404]);",
							"  });",
							"",
							"  // ‚úÖ Verwijder propertyId netjes uit de environment",
							"  pm.test(\"üßπ propertyId verwijderd uit environment\", () => {",
							"    pm.environment.unset(\"propertyId\");",
							"  });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/properties/{{propertyId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"properties",
						"{{propertyId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete host by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ‚úÖ Haal de opgeslagen hostId op",
							"const hostId = pm.environment.get(\"hostId\");",
							"",
							"if (!hostId) {",
							"  console.warn(\"‚ö†Ô∏è Geen hostId gevonden ‚Äì skip deze test.\");",
							"  postman.setNextRequest(null); // Stop de testflow netjes",
							"} else {",
							"  // ‚úÖ Sta 200, 204 of 404 toe",
							"  pm.test(\"‚úÖ Host succesvol verwijderd of al niet aanwezig\", () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 404]);",
							"  });",
							"",
							"  // ‚úÖ Verwijder hostId uit environment",
							"  pm.test(\"üßπ hostId verwijderd uit environment\", () => {",
							"    pm.environment.unset(\"hostId\");",
							"  });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/hosts/{{hostId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"hosts",
						"{{hostId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const userId = pm.environment.get(\"userId\");",
							"",
							"if (!userId) {",
							"  console.warn(\"‚ö†Ô∏è Geen userId aanwezig ‚Äì skip deze test.\");",
							"  postman.setNextRequest(null); // Stop de ketting",
							"} else {",
							"  pm.test(\"‚úÖ User verwijderd of al niet meer aanwezig\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 404]);",
							"  });",
							"",
							"  pm.test(\"üßπ userId uit environment verwijderd\", function () {",
							"    pm.environment.unset(\"userId\");",
							"  });",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{bearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	]
}